{"version":3,"sources":["Navbar.js","Home.js","Skills.js","Project.js","About.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","Home","Skills","Project","About","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","href","rel","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OAyBeA,MArBf,WACE,OACE,6BACI,wBAAIC,UAAU,aACZ,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,YACrB,qCAEF,kBAAC,IAAD,CAAMC,GAAG,UAAUD,UAAU,YAC3B,uCAEF,kBAAC,IAAD,CAAMC,GAAG,WAAWD,UAAU,YAC5B,wCAEF,kBAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,YAC1B,yCCHGE,MAZf,WACE,OACI,yBAAKF,UAAU,QACX,0BAAMA,UAAU,eAAhB,gBACA,0BAAMA,UAAU,WAAhB,uBACA,0BAAMA,UAAU,OAAhB,eACA,0BAAMA,UAAU,YAAhB,aACA,0BAAMA,UAAU,iBAAhB,yCCIKG,MAXf,WACE,OACI,yBAAKH,UAAU,UACT,sCACA,yBAAKA,UAAU,kBCIZI,MARf,WACE,OACI,yBAAKJ,UAAU,WACT,8CCKGK,MARf,WACE,OACE,yBAAKL,UAAU,SACX,4C,OCoBOM,MAhBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOO,KAAK,IAAIC,OAAK,EAACC,UAAWP,IACjC,kBAAC,IAAD,CAAOK,KAAK,UAAUE,UAAWN,IACjC,kBAAC,IAAD,CAAOI,KAAK,WAAWE,UAAWL,IAClC,kBAAC,IAAD,CAAOG,KAAK,SAASE,UAAWJ,QCPtBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,0BAAMC,KAAK,gGAAgGC,IAAI,eAC/G,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a0994201.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <nav>\r\n        <ul className=\"nav-links\">\r\n          <Link to=\"/\" className=\"nav-link\">\r\n            <li>Home</li>\r\n          </Link>\r\n          <Link to=\"/skills\" className=\"nav-link\">\r\n            <li>Skills</li>\r\n          </Link>\r\n          <Link to=\"/project\" className=\"nav-link\">\r\n            <li>Project</li>\r\n          </Link>\r\n          <Link to=\"/about\" className=\"nav-link\">\r\n            <li>About</li>\r\n          </Link>\r\n        </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction Home() {\r\n  return (\r\n      <div className=\"home\">\r\n          <span className=\"hello-world\">Hello World!</span>\r\n          <span className=\"my-name\">I'm Aldy Syachranie</span>\r\n          <span className=\"aka\">as known as</span>\r\n          <span className=\"aka-boft\">Boft/b0ft</span>\r\n          <span className=\"web-developer\">Web Developer | Front-End Developer</span>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction Skills() {\r\n  return (\r\n      <div className=\"skills\">\r\n            <h1>Skills</h1>\r\n            <div className=\"list-skills\">\r\n                {/* img */}\r\n            </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Skills;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction Project() {\r\n  return (\r\n      <div className=\"project\">\r\n            <h1>Project Page</h1>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Project;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction About() {\r\n  return (\r\n    <div className=\"about\">\r\n        <h1>About Page</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from 'react'\nimport './App.css'\nimport Navbar from './Navbar'\nimport Home from './Home'\nimport Skills from './Skills'\nimport Project from './Project'\nimport About from './About'\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/skills\" component={Skills} />\n          <Route path=\"/project\" component={Project} />\n          <Route path=\"/about\" component={About} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700;800;900&display=swap\" rel=\"stylesheet\"></link>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}